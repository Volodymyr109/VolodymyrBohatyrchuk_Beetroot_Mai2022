# Взагалі не зрозумів що ці функції мають робити((((((((
# 
# 
# def __contains__(self, other):
#     return any(other is item or other == item for item in self)
# 
# 
# def __len__(self, key, data):
#     return 2  
# 


#TASK_1 binary search
nums = [1, 2, 3, 4, 5, 6, 2,1, 2]
nums.sort()
print(nums)

search_for = 3

lowest = 0
highest = len(nums) - 1
index = None

while(lowest <= highest) and (index is None):
    mid = (lowest+highest) // 2

    if nums[mid] == search_for:
        index = mid
    else:
        if search_for < nums[mid]:
            highest = mid - 1
        else:
            lowest = mid + 1

print(search_for, index)

#Task_2 FIBONACCI SEACH
def fibonacci_search(arr,x):
    
    l = len(arr)
    elim = -1
    fb_2 = 0    
    fb_1 = 1    
    fb = fb_1+fb_2
    while fb<l:
        fb_1, fb_2 = fb, fb_1
        fb = fb_1+fb_2
    while fb>1:
        curr = min(elim+fb_2,l-1) 
        if arr[curr] == x:
            return curr    
        elif arr[curr] > x:
            fb = fb_2
            fb_1 = fb_1 - fb_2
            fb_2 = fb_2 - fb_1   
        else:   
            fb = fb_1
            fb_1 = fb_2
            fb_2 = fb - fb_1   
            elim = curr   
    return -1

print(fibonacci_search(arr, x))  #що тут не так? 

#3
class HashTable:
    def __init__(self):
        self.size = 11
        self.slots = [None] * self.size
        self.data = [None] * self.size

    def put(self, key, data):
        hash_value = self.hash_function(key, len(self.slots))

        if self.slots[hash_value] is None:
            self.slots[hash_value] = key
            self.data[hash_value] = data
        else:
            if self.slots[hash_value] == key:
                self.data[hash_value] = data
            else:
                next_slot = self.re_hash(hash_value, len(self.slots))
                while self.slots[next_slot] is not None and self.slots[next_slot] != key:
                    next_slot = self.re_hash(next_slot, len(self.slots))

                if self.slots[next_slot] is None:
                    self.slots[next_slot] = key
                    self.data[next_slot] = data
                else:
                    self.data[next_slot] = data

    @staticmethod
    def hash_function(key, size):
        return key % size

    @staticmethod
    def re_hash(old_hash, size):
        return (old_hash + 1) % size

    def get(self, key):
        start_slot = self.hash_function(key, len(self.slots))

        data = None
        stop = False
        found = False
        position = start_slot
        while self.slots[position] is not None and not found and not stop:
            if self.slots[position] == key:
                found = True
                data = self.data[position]
            else:
                position = self.re_hash(position, len(self.slots))
                if position == start_slot:
                    stop = True

        return data

    def __getitem__(self, key):
        return self.get(key)

    def __setitem__(self, key, data):
        self.put(key, data)
##########################################################
    def __contains__(self, other):
        return any(other is item or other == item for item in self)


    def __len__(self, key, data):
        return 2 # це просто робить ретурн з жовжиною яку задав????

if __name__ == "__main__":
    H = HashTable()
    H[54] = "cat"
    H[26] = "dog"
    H[93] = "lion"
    H[17] = "tiger"
    H[77] = "bird"
    H[31] = "cow"
    H[44] = "goat"
    H[55] = "pig"
    H[20] = "chicken"
    print(H.slots)
    print(H.data)

    print(H[20])

    print(H[17])
    H[20] = "duck"
    print(H[20])
    print(H[99])
